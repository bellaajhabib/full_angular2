/**
 * Base class for custom errors.
 *
 * Copyright (C) 2015 Martin Poelstra
 * License: MIT
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var hasStacks = (typeof Error.captureStackTrace === "function");
var BaseError = (function (_super) {
    __extends(BaseError, _super);
    function BaseError(name, message) {
        _super.call(this, message);
        this.name = name;
        // Note: still need to 'manually' assign .message,
        // because engines apparently don't allow subclassing properly.
        // https://github.com/Microsoft/TypeScript/issues/1168#issuecomment-107729088
        this.message = message;
        /* istanbul ignore else */ // TODO: remove when testing for non-V8
        if (hasStacks) {
            Error.captureStackTrace(this, this.constructor);
        }
        else {
            this.stack = "dummy\n<no trace>";
        }
    }
    return BaseError;
}(Error));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BaseError;
//# sourceMappingURL=BaseError.js.map